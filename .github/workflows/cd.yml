name: Continuous Deployment

on:
    push:
        tags:
            - "v?[0-9]+.[0-9]+.[0-9]+"
    workflow_dispatch:

jobs:
    publish:
        name: Publishing for ${{ matrix.job.target }} ${{ matrix.job.LIBCEC_STATIC == '1' && 'static' || matrix.job.apt-libcec }}
        runs-on: ${{ matrix.job.os }}
        strategy:
            matrix:
                rust: [stable]
                job:
                    # libcec7 shared builds (vendored libcec in libcec-sys is v7)
                    - os: ubuntu-22.04
                      os-name: linux
                      target: arm-unknown-linux-gnueabi
                      architecture: arm
                      deb_arch: armel
                      binary-postfix: "-cec7"
                      LIBCEC_VENDORED: "1"
                    - os: ubuntu-22.04
                      os-name: linux
                      target: armv7-unknown-linux-gnueabihf
                      architecture: armv7
                      deb_arch: armhf
                      binary-postfix: "-cec7"
                      LIBCEC_VENDORED: "1"
                    - os: ubuntu-22.04
                      os-name: linux
                      target: aarch64-unknown-linux-gnu
                      architecture: arm64
                      deb_arch: arm64
                      binary-postfix: "-cec7"
                      LIBCEC_VENDORED: "1"
                    # libcec6 shared builds
                    - os: ubuntu-22.04
                      os-name: linux
                      target: arm-unknown-linux-gnueabi
                      architecture: arm
                      deb_arch: armel
                      binary-postfix: "-cec6"
                      LIBCEC_VENDORED: "0"
                      LIBCEC_STATIC: "0"
                      apt-libcec: libcec6
                      apt-libcec-dev: "libcec-dev=6*"
                    - os: ubuntu-22.04
                      os-name: linux
                      target: armv7-unknown-linux-gnueabihf
                      architecture: armv7
                      deb_arch: armhf
                      binary-postfix: "-cec6"
                      LIBCEC_VENDORED: "0"
                      LIBCEC_STATIC: "0"
                      apt-libcec: libcec6
                      apt-libcec-dev: "libcec-dev=6*"
                    - os: ubuntu-22.04
                      os-name: linux
                      target: aarch64-unknown-linux-gnu
                      architecture: arm64
                      deb_arch: arm64
                      binary-postfix: "-cec6"
                      LIBCEC_VENDORED: "0"
                      LIBCEC_STATIC: "0"
                      apt-libcec: libcec6
                      apt-libcec-dev: "libcec-dev=6*"
                    # static builds
                    - os: ubuntu-22.04
                      os-name: linux
                      target: arm-unknown-linux-gnueabi
                      architecture: arm
                      deb_arch: armel
                      binary-postfix: "-cec7-static"
                      LIBCEC_STATIC: "1"
                    - os: ubuntu-22.04
                      os-name: linux
                      target: armv7-unknown-linux-gnueabihf
                      architecture: armv7
                      deb_arch: armhf
                      binary-postfix: "-cec7-static"
                      LIBCEC_STATIC: "1"
                    - os: ubuntu-22.04
                      os-name: linux
                      target: aarch64-unknown-linux-gnu
                      architecture: arm64
                      deb_arch: arm64
                      binary-postfix: "-cec7-static"
                      LIBCEC_STATIC: "1"
        container:
          image: ghcr.io/cross-rs/${{ matrix.job.target }}:main

        steps:
            - name: Installing Rust toolchain
              uses: actions-rs/toolchain@v1
              with:
                  toolchain: ${{ matrix.rust }}
                  target: ${{ matrix.job.target }}
                  profile: minimal
                  override: true
            - name: Checkout repository
              uses: actions/checkout@v2

            - name: Install libudev-dev for device detection support
              run: |
                dpkg --add-architecture ${{ matrix.job.deb_arch }}
                apt-get update && apt-get --assume-yes install libudev-dev:${{ matrix.job.deb_arch }} \
                || echo "Could not find libudev-udev for this architecture. Libcec device detection might be unavailable"

            - name: Install libcec6
              if: ${{ matrix.job.LIBCEC_VENDORED == '0' && matrix.job.LIBCEC_STATIC == '0' && matrix.job.apt-libcec != '' && matrix.job.apt-libcec-dev != '' }}
              run: |
                  apt-get update
                  sudo apt install -yq pkg-config libp8-platform2 libp8-platform-dev ${{ matrix.job.apt-libcec }} ${{ matrix.job.apt-libcec-dev }}

            - name: Cargo build
              uses: actions-rs/cargo@v1
              with:
                  command: build
                  toolchain: ${{ matrix.rust }}
                  args: --release --target ${{ matrix.job.target }}
              env:
                  LIBCEC_STATIC: ${{ matrix.job.LIBCEC_STATIC || '0' }}
                  LIBCEC_VENDORED: ${{ matrix.job.LIBCEC_VENDORED || '0' }}

            - name: install strip command
              shell: bash
              run: |
                  apt update
                  if [[ ${{ matrix.job.target }} == armv7-unknown-linux-gnueabihf ]]; then
                    BINUTILS=binutils-arm-linux-gnueabihf
                  else
                    BINUTILS=$(echo "binutils-${{ matrix.job.target }}"|sed s/unknown-//|tr _ -)
                  fi
                  apt-get install -y $BINUTILS

            - name: Packaging final binary
              shell: bash
              run: |
                  set -x
                  cd target/${{ matrix.job.target }}/release

                  ####### reduce binary size by removing debug symbols #######
                  BINARY_NAME=cec-alsa-sync
                  if [[ ${{ matrix.job.target }} == armv7-unknown-linux-gnueabihf ]]; then
                    GCC_PREFIX=arm-linux-gnueabihf-
                  else
                    GCC_PREFIX=$(echo "${{ matrix.job.target }}-"|sed s/unknown-//)
                  fi
                  "$GCC_PREFIX"strip $BINARY_NAME
                  if [[ "${{ matrix.job.binary-postfix }}" != "" ]]; then                    
                    mv $BINARY_NAME $BINARY_NAME${{ matrix.job.binary-postfix }}
                  fi

                  ########## create tar.gz ##########
                  REF_NAME=${GITHUB_REF#refs/*/}
                  RELEASE_NAME=cec-alsa-sync${{ matrix.job.binary-postfix }}-$REF_NAME-${{ matrix.job.os-name }}-${{ matrix.job.architecture }}
                  tar czvf $RELEASE_NAME.tar.gz $BINARY_NAME${{ matrix.job.binary-postfix }}

                  ########## create sha256 ##########
                  if [[ ${{ runner.os }} == 'Windows' ]]; then
                    certutil -hashfile $RELEASE_NAME.tar.gz sha256 | grep -E [A-Fa-f0-9]{64} > $RELEASE_NAME.sha256
                  else
                    shasum -a 256 $RELEASE_NAME.tar.gz > $RELEASE_NAME.sha256
                  fi
            - name: Releasing assets
              uses: softprops/action-gh-release@v1
              with:
                  files: |
                      target/${{ matrix.job.target }}/release/cec-alsa-sync-*.tar.gz
                      target/${{ matrix.job.target }}/release/cec-alsa-sync-*.sha256
              env:
                  GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

    #publish-cargo:
    #    name: Publishing to Cargo
    #    runs-on: ubuntu-22.04
    #    steps:
    #        - uses: actions/checkout@master
    #        - name: Install dependencies to avoid vendored libcec build in libcec-sys
    #          run: sudo apt-get install libudev-dev libcec6 libcec-dev pkg-config libp8-platform-dev
    #        - uses: actions-rs/toolchain@v1
    #          with:
    #              toolchain: stable
    #              profile: minimal
    #              override: true
    #        - uses: actions-rs/cargo@v1
    #          with:
    #              command: publish
    #              args: --token ${{ secrets.CARGO_API_KEY }} --allow-dirty
